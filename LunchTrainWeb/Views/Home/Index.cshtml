@{
    ViewBag.Title = "Home Page";
}
<div id="confirmpurgeshade" style="display:none; position:fixed; width:100%; height:100%; z-index:100; top:0; left:0;background: silver; opacity: 0.5; filter: alpha(opacity=50); ">
    
</div>
<div id="confirmpurgescreen" style="display:none; position:fixed; top: 40%; left: 40%; width: 25%; background: #FFF; z-index:101; border: 1px solid #000;">
    <label id="confirmpurgetext" style="color:#000;"></label>
    <div style="padding-top:1em;">
        <input type="button" id="confirmpurge" value="Agree" class="fancy" style="float:left;"/>
        <input type="button" id="denypurge" value="Deny" class="fancy" style="float:right;" />
    </div>
</div>
<div id="awaitpurgeconfirm" style="display:none; position:fixed; top: 40%; left: 40%; width: 25%; background: #FFF; z-index:101; border: 1px solid #000;">
    <label style="color:#000;">Your request has been submitted...</label>
    <div style="padding-top:1em;">
        <input type="button" id="cancelpurge" value="Cancel" class="fancy" style="float:left;"/>
    </div>
</div>
<div class="restaurant-suggestion">
    <h2>Suggest a Restaurant</h2>
    <input type="text" id="suggestion" placeholder="Restaurant Name" />
    <input type="button" id="suggestlocation" value="Suggest" class="fancy" />
    <input type="button" id="purgedata" value="Clear All Votes" />
    <input type="hidden" id="displayname" />
</div>
<div class="restaurant-list">
    <h2>Vote for a Restaurant</h2>
    <div id="suggestions">
        <svg  fill="#494a4a"></svg>
    </div>
</div>

@section scripts {
    <script src="~/Scripts/jquery.signalR-1.1.2.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        $(function () {
            var lunch = $.connection.lunchHub;
            lunch.client.RefreshVotes = function (votes) {
                var width = 420;
                var xOffset = 150;
                var chart = d3.select("#suggestions svg")
                    .attr("class", "chart")
                    .attr("width", width)
                    .attr("height", 20 * votes.length);
                var maxVote = d3.max($.map(votes, function (o) { return o.VoterNames.length; }));

                prepareChartBars(votes, chart, maxVote, width, xOffset);
                prepareChartValues(votes, chart, maxVote, width, xOffset);
                prepareChartLabels(votes, chart);
            };

            function prepareChartBars(votes, chart, maxVote, width, xOffset) {
                var x = d3.scale.linear()
                    .domain([0, maxVote])
                    .range([0, width]);

                var bars = chart.selectAll("rect");
                var barData = bars.data(votes);

                barData.exit().remove();

                barData
                    .attr("height", 20)
                    .attr("x", xOffset)
                    .transition()
                    .duration(500)
                    .ease("quad")
                    .attr("y", function (d, i) { return i * 20; })
                    .attr("width", function (d, i) { return ((d.VoterNames.length) / maxVote) * (width - xOffset)});

                barData.enter().append("rect")
                    .attr("y", function (d, i) { return i * 20; })
                    .attr("x", xOffset)
                    .attr("height", 20)
                    .transition()
                    .duration(500)
                    .ease("quad")
                    .attr("width", function (d, i) { return ((d.VoterNames.length) / maxVote) * (width - xOffset) });
            };

            function prepareChartValues(votes, chart, maxVote, width, xOffset) {

                chart.selectAll("text.chartvalue")
                    .data(votes)
                    .attr("class", "chartvalue")
                    .attr("y", function (d, i) { return i * 20; })
                    .transition()
                    .duration(500)
                    .attr("x", xOffset)
                    .ease("quad")
                    .attr("x", function (d, i) { return (((d.VoterNames.length) / maxVote) * (width - xOffset)) + xOffset })
                    .attr("dx", -3) // padding-right
                    .attr("dy", "16px") // vertical-align: middle
                    .attr("text-anchor", "end") // text-align: right
                    .text(function (d) { return d.VoterNames.length });

                chart.selectAll("text.chartvalue")
                    .data(votes)
                    .enter().append("text")
                    .attr("class", "chartvalue")
                    .attr("y", function (d, i) { return i * 20; })
                    .attr("x", xOffset)
                    .transition()
                    .duration(500)
                    .ease("quad")
                    .attr("x", function (d, i) { return (((d.VoterNames.length) / maxVote) * (width - xOffset)) + xOffset})
                    .attr("dx", -3) // padding-right
                    .attr("dy", "16px") // vertical-align: middle
                    .attr("text-anchor", "end") // text-align: right
                    .text(function (d) { return d.VoterNames.length });

                chart.selectAll("text.chartvalue").data(votes).exit().remove();
            };

            function prepareChartLabels(votes, chart) {
                var labeldata = votes.map(function (v) { return v.RestaurantName; });

                chart.selectAll("text.chartlabel").data(votes).exit().remove();

                chart.selectAll("text.chartlabel")
                    .data(labeldata)
                    .attr("class", "chartlabel")
                    .attr("x", 0)
                    .attr("dy", "16px")
                    .transition()
                    .duration(500)
                    .ease("quad")
                    .attr("y", function (d, i) { return i * 20; })
                    .text(String);
                chart.selectAll("text.chartlabel")
                    .data(labeldata)
                    .enter().append("text")
                    .attr("class", "chartlabel")
                    .attr("y", function (d, i) { return i * 20; })
                    .attr("x", 0)
                    .attr("dy", "16px")
                    .text(String);

                
            }

            $('#denypurge').click(function () {
                hideOverlays();
            });

            function hideOverlays() {
                $('#confirmpurgeshade').hide();
                $('#awaitpurgeconfirm').hide();
                $('#confirmpurgescreen').hide();
            }

            lunch.client.cancelClearRequest = hideOverlays;

            lunch.client.RequestClear = function (requester) {
                $('#confirmpurgetext').text(requester + " wants to clear all votes. Do you agree?");
                $('#confirmpurgeshade').show();
                $('#confirmpurgescreen').show();
            };

            $.connection.hub.start().done(function () {
                $('#suggestlocation').click(function () {
                    lunch.server.voteForRestaurant($('#displayname').val(), $('#suggestion').val());
                    $('#suggestion').val('').focus();
                });
                $('#suggestions').on('click', 'li span.restaurant', function (ev) {
                    var restaurant = $(this).text().split(' : ', 1)[0];
                    lunch.server.voteForRestaurant($('#displayname').val(), restaurant);
                    $('#suggestion').val('').focus();
                });
                $('#suggestions').on('click', 'li span.unvote', function (ev) {
                    var restaurant = $(this).prev().text().split(' : ', 1)[0];
                    lunch.server.unVoteForRestaurant($('#displayname').val(), restaurant);
                    $('#suggestion').val('').focus();
                });
                $('#purgedata').click(function () {
                    lunch.server.requestClearVotes($('#displayname').val());
                    $('#confirmpurgeshade').show();
                    $('#awaitpurgeconfirm').show();
                });
                $('#confirmpurge').click(function () {
                    lunch.server.confirmClearVotes();
                    $('#suggestion').val('').focus();
                });
                $('#cancelpurge').click(function () {
                    lunch.server.cancelClearVotes();
                    hideOverlays();
                });
                lunch.server.getVotes();

                // Get the user name and store it to prepend to messages.
                $('#displayname').val(prompt('Enter your name:', ''));
                $('#suggestion').focus();
            });

            
        });
        
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}